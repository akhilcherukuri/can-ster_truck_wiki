[[File:CMPE243_S20_T2_Canster_Truck_Logo.png|thumb|455px|caption|right|CAN-STER TRUCK LOGO]]

== '''Abstract''' ==
'''The Canster Truck Project is an autonomous RC car with CAN Bus interfaced controllers. The development of the RC car's subsystem modules (Interfacing of Ultrasonic Sensor, LIDAR, Bluetooth, GPS, Compass and CAN modules) was divided among six team members. The aim of the project is to develop an autonomous RC Car which can navigate from one source location to the selected destination on the app by avoiding obstacles in its path using sensors. Waypoints algorithm is used as the path finding technique.'''

<BR/>

== '''Introduction and Objectives''' ==

'''The project was divided into 7 modules:'''

* <font color= "DF7C24">'''Bridge and Sensor Controller'''</font color>
* <font color= "00CED1">'''Motor Controller'''</font color>
* <font color= "052EFA">'''Geological Controller'''</font color>
* <font color= "8911B9">'''Driver and LCD Controller'''</font color>
* <font color="A52A2A">'''Hardware Integration'''</font color> 
* <font color= "32CD32 ">'''Android Application'''</font color>
* <font color= "F1C40F"> '''Testing & Code Review'''</font color>

'''RC Car Objectives'''
      '''<font color= "8911B9">1. Driver and LCD Controller</font color>''' - Handles algorithms for obstacle avoidance, route maneuvering, and waypoints
      '''<font color= "052EFA">2. Geological Controller</font color>''' - Recieves coordinates from GPS and Heading from Compass for navigation 
      '''<font color= "00CED1">3. Motor Controller</font color>''' - Controls movements of the RC Car 
      '''<font color= "DF7C24">4. Bridge and Sensor Controller</font color>''' - Detects surrounding objects and interfaces android application to controller via bluetooth
'''Team Objectives'''

[[File:CMPE243_S20_T2_High_Level_System_Diagram.png|thumb|center|800px| High Level System Diagram]]

<BR/>

== '''Team Members and Responsibilities''' ==

'''Gitlab Project Link''' - [https://gitlab.com/coder137/can-ster_truck  '''Canster Truck''']
<BR/>

*'''Niket Naidu''' [https://www.linkedin.com/in/niket-naidu-30090a134/  LinkedIn] [https://gitlab.com/coder137  Gitlab] 
** <font color= "052EFA">'''Geological Controller'''</font color>
** <font color= "8911B9">'''Driver and LCD Controller'''</font color>
** <font color= "F1C40F"> '''Testing & Code Review'''</font color>
** <font color= "32CD32 ">'''Android Application'''</font color>

*'''Ganesh Ram Pamadi''' [https://www.linkedin.com/in/ganeshram93/  LinkedIn] [https://gitlab.com/ganeshram2493  Gitlab]
** <font color="A52A2A">'''Hardware Integration'''</font color>
** <font color= "F1C40F"> '''Testing & Code Review'''</font color>
** <font color= "00CED1">'''Driver Controller'''</font color>
** <font color= "052EFA">'''Motor Controller'''</font color>

*'''Nikhil Pabbisetty'''  [https://www.linkedin.com/in/nikhilpabbisetty/  LinkedIn] [https://gitlab.com/nikhilpeoria  Gitlab]
** <font color= "DF7C24">'''Bridge and Sensor Controller'''</font color>
** <font color= "00CED1">'''Motor Controller'''</font color>

*'''Akhil Cherukuri''' [https://www.linkedin.com/in/akhilcherukuri/  LinkedIn] [https://gitlab.com/akhilcherukuri  Gitlab] [https://github.com/akhilcherukuri Github]
** <font color= "32CD32 ">'''Android Application'''</font color>
** <font color= "052EFA">'''Geological Controller'''</font color>
** <font color="A52A2A">'''Hardware Integration'''</font color>

*'''Ashish Anant Ladage''' [https://www.linkedin.com/in/ashish-anant-ladage-7bb3a214b/  LinkedIn] [https://gitlab.com/ashishladage1  Gitlab] 
** <font color= "8911B9">'''Driver and LCD Controller'''</font color>
** <font color="A52A2A">'''Hardware Integration'''</font color>
** <font color= "00CED1">'''Motor Controller'''</font color>

*'''Jesus De Haro De Reza''' [https://www.linkedin.com/in/jesus-de-haro-66342424/  LinkedIn] [https://gitlab.com/deharo27  Gitlab]
** <font color= "DF7C24">'''Bridge and Sensor Controller'''</font color>
** <font color= "00CED1">'''Motor Controller'''</font color>

<BR/>

== '''Administrative Responsibilities''' ==
* '''Team Lead''' - [https://www.linkedin.com/in/niket-naidu-30090a134/  '''Niket Naidu'''] 
* '''Git Repository Manager''' - [https://www.linkedin.com/in/niket-naidu-30090a134/  '''Niket Naidu'''] 
* '''Bill Of Materials Manager''' - [https://www.linkedin.com/in/akhilcherukuri '''Akhil Cherukuri''']
* '''Wiki Report Manager''' - [https://www.linkedin.com/in/akhilcherukuri '''Akhil Cherukuri''']

<BR/>

== '''Schedule''' ==


{| class="wikitable" style="width: 100%;"
|-
! scope="col"| Week#
! scope="col"| Start Date
! scope="col"| End Date
! scope="col"| Task
! scope="col"| Status
|-

! scope="row"| '''1'''
| style="text-align:center;" |'''02/11/2020'''
| style="text-align:center;" |'''02/17/2020'''
|
*'''Form teams and decide group name'''
*'''Review past projects'''
*'''Slack: Create project group and invite Preet'''
*'''GitLab: Create project groups repository'''
*'''Analysis of component required'''

| 
*<font color="green">'''Completed'''</font>
*<font color="green">'''Completed'''</font>
*<font color="green">'''Completed'''</font>
*<font color="green">'''Completed'''</font>
*<font color="green">'''Completed'''</font>
|-

! scope="row"| '''2'''
| style="text-align:center;" |'''02/18/2020'''
| style="text-align:center;" |'''02/24/2020'''
|
*'''Study CAN Communication'''
*'''Create Bill of Materials'''
*'''Order RC Car''' 
|
*<font color="green">'''Completed'''</font>
*<font color="green">'''Completed'''</font>
*<font color="green">'''Completed'''</font>
|-

! scope="row"| '''3'''
| style="text-align:center;" |'''02/25/2020'''
| style="text-align:center;" |'''03/02/2020'''
|
*'''Setup team finance management using Splitwise application'''
*'''Complete Bill of Materials'''
*'''Order all other required components'''
*'''Wikipedia: Setup project report template'''
|
*<font color="green">'''Completed'''</font>
*<font color="green">'''Completed'''</font>
*<font color="green">'''Completed'''</font>
*<font color="green">'''Completed'''</font>
|-

! scope="row"| '''4'''
| style="text-align:center;" |'''03/03/2020'''
| style="text-align:center;" |'''03/09/2020'''
|
*'''Read the respective datasheets and manuals for each component'''
*'''Test each component for working conditions'''
|
*<font color="green">'''Completed'''</font>
*<font color="green">'''Completed'''</font>
|-

! scope="row"| '''5'''
| style="text-align:center;" |'''03/10/2020'''
| style="text-align:center;" |'''03/16/2020'''
|
*'''Assign team responsibilities and roles'''
*'''Setup team project management environment (ClickUp)''' 
*'''Define CAN DBC'''
*'''Research GPS antennas and order'''
*<font color="32CD32">'''Android: Environmental setup of Android Studio and enable version control'''</font>
*<font color="A52A2A">'''Hardware : Decide PCB editing software (easyEDA)'''</font>
*<font color="A52A2A">'''Hardware : Draft schematic for required PCB design'''</font> 
|
*<font color="green">'''Completed'''</font>
*<font color="green">'''Completed'''</font>
*<font color="green">'''Completed'''</font>
*<font color="green">'''Completed'''</font>
*<font color="green">'''Completed'''</font>
*<font color="green">'''Completed'''</font>
*<font color="green">'''Completed'''</font>
|-

! scope="row"| '''6'''
| style="text-align:center;" |'''03/17/2020'''
| style="text-align:center;" |'''03/23/2020'''
|
*<font color="A52A2A">'''Hardware : Create model of PCB''' </font>
*<font color="32CD32">'''Android: Add a Button for changing bluetooth connection status in the application''' </font>
*<font color= "052EFA">'''Geological: Interface Compass module with SJ-2 board using I2C interface''' </font>
*<font color= "052EFA">'''Geological: Interface GPS module with SJ-2 board using the UART interface''' </font>
*<font color= "052EFA">'''Geological: Parse raw data to get meaningful values for GPS and Compass''' </font>
*<font color= "DF7C24">'''Sensor: Interface and check the functionality of ultrasonic sensors to the SJ-2 board''' </font>
*<font color= "00CED1">'''Motor: Interface of Servo & DC motor to the SJ-2 board and check for basic functionality''' </font>
|
*<font color="green">'''Completed'''</font>
*<font color="green">'''Completed'''</font>
*<font color="green">'''Completed'''</font>
*<font color="green">'''Completed'''</font>
*<font color="green">'''Completed'''</font>
*<font color="green">'''Completed'''</font>
*<font color="green">'''Completed'''</font>
|-

! scope="row"| '''7'''
| style="text-align:center;" |'''03/24/2020'''
| style="text-align:center;" |'''03/30/2020'''
|
*<font color="A52A2A">'''Hardware : Finalize components placement on PCB.''' </font>
*<font color= "00CED1">'''Motor: Add PWM functionality and test the code on DC and servo motors''' </font>
*<font color= "DF7C24">'''Sensor: Interface and check and study the output readings of Lidar sensor with SJ-2 board over UART''' </font>
*<font color= "8911B9">'''LCD Display: Explore UI designing of LCD''' </font>
*<font color="A52A2A">'''Hardware: Finalize on optimal ultrasonic sensor placements''' </font>
*<font color= "32CD32 ">'''Android: Initiate Bluetooth communication and show staus via text view''' </font>
*'''Wikipedia: Establish final wiki schedule'''
*'''Complete CAN communication format for each controller and link DBC file to the Wiki'''
*'''Complete high-level system block diagram'''
*'''Complete unit-level block diagrams'''
*<font color= "DF7C24">'''Bridge: Interface HC-5 bluetooth module with Sj-2 board using serial communicaton'''</font>
|
*<font color="green">'''Completed'''</font>
*<font color="green">'''Completed'''</font>
*<font color="green">'''Completed'''</font>
*<font color="green">'''Completed'''</font>
*<font color="green">'''Completed'''</font>
*<font color="green">'''Completed'''</font>
*<font color="green">'''Completed'''</font>
*<font color="green">'''Completed'''</font>
*<font color="green">'''Completed'''</font>
*<font color="blue">'''In Progress'''</font>
*<font color="green">'''Completed'''</font>
|-

! scope="row"| '''8'''
| style="text-align:center;" |'''03/31/2020'''
| style="text-align:center;" |'''04/06/2020'''
|
*<font color="A52A2A">'''Hardware: Analyze PCB model and order PCB Circuit board''' </font>
*<font color= "32CD32 ">'''Android: Initiate Bluetooth communication and send "Hello World".''' </font>
*'''Wikipedia: Start adding information/images/diagrams to the relevant sections''' 
*<font color= "00CED1">'''Motor: Configure ESC for correct speed outcome according to frequency & PWM values''' </font>
*<font color= "00CED1">'''Motor: Finish RPM sensor hardware and software implementation and integration''' </font>
*<font color= "DF7C24">'''Sensor: Read output from Lidar and setup structure for outputting for DBC''' </font>
*<font color= "052EFA">'''Geological: Implement waypoints algorithm''' </font>
*<font color= "8911B9">'''Driver: Implement obstacle avoidance algorithm''' </font>
*<font color= "DF7C24">'''Bridge: Pass data such as "Hello World" from HC-05 bluetooth module to bluetooth terminal android application'''</font>
|
*<font color="green">'''Completed'''</font>
*<font color="green">'''Completed'''</font>
*<font color="blue">'''In Progress'''</font>
*<font color="green">'''Completed'''</font>
*<font color="green">'''Completed'''</font>
*<font color="blue">'''In Progress'''</font>
*<font color="blue">'''In Progress'''</font>
*<font color="green">'''Completed'''</font>
*<font color="blue">'''In Progress'''</font>
|-

! scope="row"| '''9'''
| style="text-align:center;" |'''04/07/2020'''
| style="text-align:center;" |'''04/13/2020'''
|
*<font color="A52A2A">'''Hardware: Remove Unused parts from RC Car''' </font>
*<font color="A52A2A">'''Hardware: Mount PCB and 3D Parts''' </font>
*<font color= "00CED1">'''Motor: Decide different cut-off values from sensor to command right /slight right/ straight/ slight left/ left to motor.''' </font>
*<font color= "32CD32 ">'''Android: Embed Google Maps API for setting the car's destination.''' </font>
*<font color= "8911B9">'''LCD: Work to show RC cars live status information(battery level, current speed, long, lat, bearing, sensor data, etc)''' </font>
*<font color= "8911B9">'''Driver: Test obstacle avoidance algorithm and fine-tune sensor readings''' </font>
*<font color= "052EFA">'''Geological: Test checkpoint algorithm''' </font>
*<font color= "DF7C24">'''Bridge: Establish two way communication between android application and bluetooth module''' </font>
*'''Update Bill of Materials for miscellaneous hardware'''
|
*<font color="blue">'''In Progress'''</font>
*<font color="blue">'''In Progress'''</font>
*<font color="green">'''Completed'''</font>
*<font color="green">'''Completed'''</font>
*<font color="blue">'''In Progress'''</font>
*<font color="blue">'''In Progress'''</font>
*<font color="blue">'''In Progress'''</font>
*<font color="blue">'''In Progress'''</font>
*<font color="blue">'''In Progress'''</font>
|-

! scope="row"| '''10'''
| style="text-align:center;" |'''04/14/2020'''
| style="text-align:center;" |'''04/20/2020'''
|
*<font color="A52A2A">'''Hardware: Integrate all hardware modules''' </font>
*<font color= "8911B9">'''LCD: Testing & Validation of the LCD UI and display vehicle status information''' </font>
*<font color= "32CD32 ">'''Android: Send car location to the app and checkpoints received to Geo module''' </font>
*<font color= "00CED1">'''Motor: Optimize PID control by accelerating/decelerating as instructed by Driver''' </font>
*<font color= "DF7C24">'''Bridge: Configure HC-05 for auto reconnection if bluetooth communication disconnects''' </font>
*'''Add multiple debug messages and transmit on CAN'''
|
*<font color="blue">'''In Progress'''</font>
*<font color="blue">'''In Progress'''</font>
*<font color="green">'''Completed'''</font>
*<font color="blue">'''In Progress'''</font>
*<font color="blue">'''In Progress'''</font>
*<font color="blue">'''In Progress'''</font>
|-

! scope="row"| '''11'''
| style="text-align:center;" |'''04/21/2020'''
| style="text-align:center;" |'''04/27/2020'''
|
*<font color= "32CD32 ">'''Android: Send additional vehicle status information from RC car to the Application for display''' </font>
*<font color= "32CD32 ">'''Android: Finalize User Interface Design and Icon''' </font>
*'''Continuously test the whole system and handling of corner cases (outside).'''
*'''Finalize RC Car For Project Proto 1'''
|
*<font color="blue">'''In Progress'''</font>
*<font color="green">'''Completed'''</font>
*
*
|-

! scope="row"| '''12'''
| style="text-align:center;" |'''04/28/2020'''
| style="text-align:center;" |'''05/04/2020'''
|
*'''Gitlab: Push final code''' 
*April 28th: Project Proto 1
*'''Finalize RC Car for Project Demo'''
*May 1st: Project Presentation
*'''Finalize RC Car for Project Proto 2'''
|
*
*
*
*
*
|-

! scope="row"| '''13'''
| style="text-align:center;" |'''05/05/2020'''
| style="text-align:center;" |'''05/21/2020'''
|
* '''Complete Individual Contribution Peer Grading'''
* '''Review and Complete Wiki Project Page'''
|
*
*
|-
|}

<BR/>

== '''Bill Of Materials''' ==
{| class="wikitable" style="width: 100%;"
|-
! scope="col"| Item#
! scope="col"| Part Description
! scope="col"| Part Model & Vendor
! scope="col"| Quantity
! scope="col"| Cost in USD
|-
! scope="row"| 1
| '''Microcontroller Boards'''
| SJ2 Boards (Purchased from Preet Kang)
| 4
| $200.00
|-
! scope="row"| 2
| '''CAN Transceivers''' 
| [https://www.waveshare.com/sn65hvd230-can-board.htm  Waveshare SN65HVD230]
| 12
| $54.48
|-
! scope="row"| 3
| '''RC Car''' 
| [https://www.amazon.com/Traxxas-Slash-Course-2-4GHZ-Vehicle/dp/B01DU474B0/ref=sr_1_3?ie=UTF8&qid=1474747759&sr=8-3&keywords=Traxxas+1%2F10+slash+2wd   Traxxas 2WD RTR with 2.4Ghz Radio]
| 1
| $260.00
|-
! scope="row"| 4
| '''Lithium-Ion Battery'''
| [https://www.rcsuperstore.com/traxxas-7600mah-2s-7-4v-25c-id-lipo-battery-pack/  Traxxas 7600mAh 2S 7.4V 25C iD LiPo Battery Pack]
| 1
| $75.00
|-
! scope="row"| 5
| '''Lithium-Ion Battery Charger'''
| [https://www.amazon.com/Traxxas-2970-EZ-Peak-Charger-Identification/dp/B00OAFYLJC/ref=pd_bxgy_21_img_2?ie=UTF8&psc=1&refRID=JVX791WVV9Y8T9DW92KW Traxxas 2970 EZ-Peak Plus 4-Amp NiMH/LiPo Fast Charger]
| 1
| $50.00
|-
! scope="row"| 6
| '''Compass Breakout Board'''
| [https://www.dfrobot.com/product-1275.html  DFRobot CMPS11 Compass]
| 1
| $29.99
|-
! scope="row"| 7
| '''Bluetooth Breakout Board'''
| [https://www.amazon.com/HC-05-Bluetooth-Pass-through-Wireless-Communication/dp/B01G9KSAF6/ref=sr_1_4?ie=UTF8&qid=1507077325&sr=8-4&keywords=arduino+bluetooth+hc-05  DSD TECH Bluetooth HC-05]
| 1
| $8.49
|-
! scope="row"| 8
| '''LIDAR Sensor'''
| [https://www.amazon.com/RPLiDAR-A1M8-Degree-Laser-Scanner/dp/B07H7X3SFF/ref=sr_1_fkmrnull_1?crid=2FSUI76G4UA8K&keywords=rplidar+a1m8+-+360+degree+laser+scanner+development+kit&qid=1552764172&s=gateway&sprefix=RPlidar%2Caps%2C263&sr=8-1-fkmrnull SEEED STUDIO RPLIDAR A1M8]
| 1
| $109.99
|-
! scope="row"| 9
| '''RPM Sensor'''
| [https://www.amazon.com/Traxxas-6520-RPM-Sensor-long/dp/B006IRXEZM  Traxxas 6520 RPM Sensor]
| 1
| $13.70
|-
! scope="row"| 10
| '''GPS Breakout Board'''
| [https://www.adafruit.com/product/746 Adafruit Ultimate GPS Breakout v3]
| 1
| $44.30
|-
! scope="row"| 11
| '''LCD Display'''
| [https://4dsystems.com.au/ulcd-32ptu 4Dsystems 3.2 TFT-LCD ULCD-32PTU]
| 1
| $79.00
|-
! scope="row"| 12
| '''Ultrasonic Sensors'''
| [https://www.amazon.com/gp/product/B01COSN7O6/ ELEGOO HC-SR04 Ultrasonic Module]
| 5
| $12.00
|-
! scope="row"| 13
| '''GPS Antenna'''  
| [https://www.amazon.com/dp/B07RRT615K/ GPS Antenna A1-UX]
| 1
| $10.98
|-
! scope="row"| 14
| '''PCB Fabrication''' 
| [https://jlcpcb.com/ JLCPCB]
| 5
| $40.15
|-
! scope="row"| 15
| '''Miscellaneous''' 
| [https://www.amazon.com Amazon],[https://www.mouser.com/ Mouser Electronics],[https://www.digikey.com/ Digikey],[https://anchor-electronics.com/ Anchor Electronics]
| ~
| $48.07
|-
! scope="row"|
| 
| 
| '''Total'''
| '''$1036.15'''
|-


|}

<BR/>

== '''Printed Circuit Board''' ==

=== Design And Architecture ===
The complete PCB (for boards and hardware peripherals) was designed using EasyEDA online software. The 4 nodes will be communicating via CAN bus and other peripherals are connected to the PCB via headers.

=== Power Section===
We have 2 power banks supplying our system. And the Servo Motor, RPM sensor and DC rear Motor (via ESC) are powered using LiPo battery (6 volts).
* Power bank #1 - Subset 2

* Power bank #2 - Subset 1, Subset 3, Bluetooth

'''NOTE:'''

'''Subset 1:'''
 1. LIDAR
 2. LCD
 3. Compass

'''Subset 2:'''
 1. Motor node
 2. Driver node
 3. BS node

'''Subset 3:'''
 1. Geo node
 2. Back ultrasonic sensor

=== Fabrication ===
* PCB was sent to fabrication to JLCPCB China which provided PCB with MOQ of 5 and 2 layers of PCB with common grounded the entire copper area.
'''DRC elements'''
* Track Width = 12
* Clearance = 10
* Via Diameter = 24
* Via Drill Diameter = 12

=== Challenges ===
* Auto-routing gave lot of challenges (only ~60% success) and sometimes the online server even crashes and faces downtime. Even local routing had lot of issues. So make sure to plan your design accordingly.
* We started our PCB design well ahead of the project. So lot of pre-planning had to be done with regard to final hardware and placement of components in order to avoid spending extra time and money while re-ordering.
* The PCB went through a lot of internal revisions even before placing order. This was time-consuming.
<br><br>


[[File:CMPE243 S20 T2 EasyEDA.png|1040x1200px|thumb|center|PCB Layout Design in EasyEDA]]
[[File:CMPE243 S20 T2 PCB SCHEMATIC.jpg|1041x550px|thumb|center|PCB Schematic]]

<div><ul> 
<li style="display: inline-block;"> [[File:CMPE243 S20 T2 PCBFRONT.jpg|thumb|none|600px|PCB Top Layer]] </li>
<li style="display: inline-block;"> [[File:CMPE243 S20 T2 PCBBACK.jpg|thumb|none|600px|PCB Bottom Layer]] </li>
</ul></div>

<BR/>

== '''CAN Communication''' ==
<Talk about your message IDs or communication strategy, such as periodic transmission, MIA management, etc.>

=== Hardware Design ===
<Show your CAN bus hardware design>

=== DBC File ===

DBC FILE: [https://gitlab.com/coder137/can-ster_truck/-/blob/dbc-improvements/projects/lpc40xx_freertos/project.dbc Gitlab]

<pre>
VERSION ""

NS_:
	BA_
	BA_DEF_
	BA_DEF_DEF_
	BA_DEF_DEF_REL_
	BA_DEF_REL_
	BA_DEF_SGTYPE_
	BA_REL_
	BA_SGTYPE_
	BO_TX_BU_
	BU_BO_REL_
	BU_EV_REL_
	BU_SG_REL_
	CAT_
	CAT_DEF_
	CM_
	ENVVAR_DATA_
	EV_DATA_
	FILTER
	NS_DESC_
	SGTYPE_
	SGTYPE_VAL_
	SG_MUL_VAL_
	SIGTYPE_VALTYPE_
	SIG_GROUP_
	SIG_TYPE_REF_
	SIG_VALTYPE_
	VAL_
	VAL_TABLE_

BS_:

BU_: DBG DRIVER IO MOTOR SENSOR GEO

BO_ 100 DRIVER_HEARTBEAT: 1 DRIVER
 SG_ DRIVER_HEARTBEAT_cmd: 0|8@1+ (1,0) [0|0] "" GEO,MOTOR,SENSOR

BO_ 101 GEO_HEARTBEAT: 1 GEO
 SG_ GEO_HEARTBEAT_cmd: 0|8@1+ (1,0) [0|0] "" DRIVER,MOTOR,SENSOR

BO_ 102 MOTOR_HEARTBEAT: 1 MOTOR
 SG_ MOTOR_HEARTBEAT_cmd: 0|8@1+ (1,0) [0|0] "" DRIVER,GEO,SENSOR

BO_ 103 SENSOR_HEARTBEAT: 1 SENSOR
 SG_ SENSOR_HEARTBEAT_cmd: 0|8@1+ (1,0) [0|0] "" DRIVER,GEO,MOTOR

BO_ 200 MOTOR_STEERING: 1 DRIVER
 SG_ MOTOR_STEERING_direction: 0|8@1- (1,0) [-2|2] "" MOTOR

BO_ 210 DRIVER_COORDINATES: 8 DRIVER
 SG_ DRIVER_COORDINATES_latitude: 0|32@1- (0.000001,-90) [-90|90] "degrees" GEO
 SG_ DRIVER_COORDINATES_longitude: 32|32@1- (0.000001,-180) [-180|180] "degrees" GEO

BO_ 220 MOTOR_SPEED: 1 DRIVER
 SG_ MOTOR_SPEED_processed: 0|8@1- (1,0) [-3|3] "" MOTOR

BO_ 300 GEO_DEGREE: 8 GEO
 SG_ GEO_DEGREE_current: 0|32@1+ (0.000001,0) [0|360] "degrees" DRIVER
 SG_ GEO_DEGREE_required: 32|32@1+ (0.000001,0) [0|360] "degrees" DRIVER

BO_ 310 GEO_DESTINATION_REACHED: 1 GEO
 SG_ GEO_DESTINATION_REACHED_cmd: 0|8@1+ (1,0) [0|0] "" DRIVER

BO_ 400 MOTOR_SPEED_FEEDBACK: 4 MOTOR
 SG_ MOTOR_SPEED_current: 0|32@1+ (0.1,0) [0|60] "kph" DRIVER

BO_ 500 SENSOR_BT_COORDINATES: 8 SENSOR
 SG_ SENSOR_BT_COORDINATES_latitude: 0|32@1- (0.000001,-90) [-90|90] "degrees" GEO
 SG_ SENSOR_BT_COORDINATES_longitude: 32|32@1- (0.000001,-180) [-180|180] "degrees" GEO

BO_ 510 SENSOR_SONARS: 8 SENSOR
 SG_ SENSOR_SONARS_left: 0|21@1+ (0.001,0) [0|0] "cm" DRIVER
 SG_ SENSOR_SONARS_right: 21|21@1+ (0.001,0) [0|0] "cm" DRIVER
 SG_ SENSOR_SONARS_middle: 42|21@1+ (0.001,0) [0|0] "cm" DRIVER

BO_ 520 SENSOR_LIDAR: 8 SENSOR
 SG_ SENSOR_LIDAR_middle: 0|16@1+ (1,0) [0|0] "cm" DRIVER
 SG_ SENSOR_LIDAR_slight_left: 16|16@1+ (1,0) [0|0] "cm" DRIVER
 SG_ SENSOR_LIDAR_slight_right: 32|16@1+ (1,0) [0|0] "cm" DRIVER
 SG_ SENSOR_LIDAR_back: 48|16@1+ (1,0) [0|0] "cm" DRIVER

BO_ 530 MOTOR_KEY: 1 SENSOR
 SG_ MOTOR_KEY_val: 0|8@1+ (1,0) [0|0] "" DRIVER

BO_ 900 GEO_CURRENT_COORDINATES: 8 GEO
 SG_ GEO_CURRENT_COORDINATES_latitude: 0|32@1- (0.000001,-90) [-90|90] "degrees" DBG
 SG_ GEO_CURRENT_COORDINATES_longitude: 32|32@1- (0.000001,-180) [-180|180] "degrees" DBG

BO_ 901 GEO_DISTANCE_FROM_DESTINATION: 4 GEO
 SG_ GEO_distance_from_destination: 0|32@1+ (0.001,0) [0|0] "meters" DBG

BO_ 902 MOTOR_INFO_DBG: 4 MOTOR
 SG_ MOTOR_INFO_DBG_rps: 0|16@1+ (1,0) [0|0] "" DBG
 SG_ MOTOR_INFO_DBG_pwm: 16|16@1+ (0.001,0) [0|0] "" DBG

BO_ 903 LIPO_BATTERY_VOLTAGE_DBG: 4 MOTOR
 SG_ LIPO_BATTERY_VOLTAGE_val: 0|32@1+ (0.01,0) [0|0] "volts" DBG

BO_ 904 CURRENT_CHECKPOINT_DBG: 1 GEO
 SG_ CURRENT_CHECKPOINT_val: 0|8@1+ (1,0) [0|0] "" DBG

CM_ "--BU (Network Node) Information--";
CM_ BU_ DRIVER "The driver controller of the car";
CM_ BU_ GEO "The geo controller of the car";
CM_ BU_ MOTOR "The motor controller of the car";
CM_ BU_ SENSOR "The sensor controller of the car";

CM_ "--BO (Message) Information--";
CM_ BO_ 100 "Driver Sync message used to synchronize the controllers";
CM_ BO_ 101 "Geo Sync message used to synchronize the controllers";
CM_ BO_ 102 "Motor Sync message used to synchronize the controllers";
CM_ BO_ 103 "Sensor Sync message used to synchronize the controllers";

CM_ BO_ 200 "Steering direction values sent by Driver Node to Motor Node";
CM_ BO_ 210 "Driver Destination coordinates sent by Driver Node";
CM_ BO_ 220 "Required motor speed computed from Driver Node to Motor Node";

CM_ BO_ 300 "Current and computer/required degree values sent by Geo Node";
CM_ BO_ 310 "Indicator signal to check if the RC car has reached the destination";

CM_ BO_ 400 "Current motor info (rps and kph) sent as feedback to the Driver Node";

CM_ BO_ 500 "Coordinate BT values (destination coordinates) sent by Sensor Node";
CM_ BO_ 510 "LIDAR - Distance from obstacle detected in each sector";
CM_ BO_ 520 "Ultrasonic Sensor - Distance from obstacle detected by each sensor";
CM_ BO_ 530 "Start/Stop signal from the Bluetooth app";

CM_ BO_ 900 "Destination coordinates for BUSMASTER debugging";
CM_ BO_ 901 "Distance from destination";
CM_ BO_ 902 "Supplied PWM value to the motor and its RPM";
CM_ BO_ 903 "LIPO Battery Voltage";
CM_ BO_ 904 "Current checkpoint of the car";

CM_ "--SG (Signal) Information for Heartbeats--";
CM_ SG_ 100 DRIVER_HEARTBEAT_cmd "Heartbeat command from the driver node";
CM_ SG_ 101 GEO_HEARTBEAT_cmd "Heartbeat command from the geological node";
CM_ SG_ 102 MOTOR_HEARTBEAT_cmd "Heartbeat command from the motor node";
CM_ SG_ 103 SENSOR_HEARTBEAT_cmd "Heartbeat command from the sensor node";

CM_ "--SG (Signal) Information for DRIVER Node--";
CM_ SG_ 200 DRIVER_STEERING_direction "Calculated Driver Steering values (-2,2) for Motor";
CM_ SG_ 210 DRIVER_COORDINATES_latitude "Destination Latitude coordinate";
CM_ SG_ 210 DRIVER_COORDINATES_longitude "Destination Longitude coordinate";
CM_ SG_ 220 MOTOR_SPEED "Calculated Driver speed values (-3,3) for Motor";

CM_ "--SG (Signal) Information for GEO Node--";
CM_ SG_ 300 GEO_DEGREE_current "Current Geo Degree relative to true north";
CM_ SG_ 300 GEO_DEGREE_required "Calculated Geo Degree computed by Haversine Formula";
CM_ SG_ 310 GEO_DESTINATION_REACHED "Indicator signal to check if the RC car has reached the destination";

CM_ "--SG (Signal) Information for MOTOR Node--";
CM_ SG_ 400 MOTOR_SPEED_FEEDBACK "Feedback speed (kph) sent by Motor Node";

CM_ "--SG (Signal) Information for SENSOR Node--";
CM_ SG_ 500 SENSOR_BT_COORDINATES_latitude "Destination Latitude received over Bluetooth";
CM_ SG_ 500 SENSOR_BT_COORDINATES_longitude "Destination Longitude received over Bluetooth";
CM_ SG_ 510 SENSOR_SONARS_left "Ultrasonic Sensor attached to the left side";
CM_ SG_ 510 SENSOR_SONARS_right "Ultrasonic Sensor attached to the right side";
CM_ SG_ 510 SENSOR_SONARS_middle "Ultrasonic Sensor attached to the middle";
CM_ SG_ 510 SENSOR_SONARS_back_left "Ultrasonic Sensor attached to the back left side";
CM_ SG_ 510 SENSOR_SONARS_back_right "Ultrasonic Sensor attached to the back right side";
CM_ SG_ 520 SENSOR_LIDAR_middle "Lidar sensing the middle sector (-15 to 15 degrees)";
CM_ SG_ 520 SENSOR_LIDAR_slight_left "Lidar sensing the slight left sector (-45 to -15 degrees)";
CM_ SG_ 520 SENSOR_LIDAR_slight_right "Lidar sensing the slight right sector (15 to 45 degrees)";
CM_ SG_ 520 SENSOR_LIDAR_back "Lidar sensing the back of the car (165 to 195 degrees)";
CM_ SG_ 530 MOTOR_KEY_val "1 -> Start the motor from the app, 0 -> Stop";

CM_ SG_ 900 GEO_CURRENT_COORDINATES_latitude "Current Latitude";
CM_ SG_ 900 GEO_CURRENT_COORDINATES_longitude "Current Longitude";
CM_ SG_ 901 GEO_distance_from_destination "Distance from destination";
CM_ SG_ 902 MOTOR_INFO_DBG_rps "Current RPS value of the motor";
CM_ SG_ 902 MOTOR_INFO_DBG_pwm "Supplied motor PWM value";
CM_ SG_ 903 LIPO_BATTERY_VOLTAGE_val "LIPO Battery Voltage";
CM_ SG_ 904 CURRENT_CHECKPOINT_val "Current checkpoint of the car";

BA_DEF_ "BusType" STRING ;
BA_DEF_ BO_ "GenMsgCycleTime" INT 0 0;
BA_DEF_ SG_ "FieldType" STRING ;

BA_DEF_DEF_ "BusType" "CAN";
BA_DEF_DEF_ "FieldType" "";
BA_DEF_DEF_ "GenMsgCycleTime" 0;

BA_ "GenMsgCycleTime" BO_ 100 1000;
BA_ "GenMsgCycleTime" BO_ 200 50;
BA_ "FieldType" SG_ 100 DRIVER_HEARTBEAT_cmd "DRIVER_HEARTBEAT_cmd";
BA_ "FieldType" SG_ 102 GEO_HEARTBEAT_cmd "GEO_HEARTBEAT_cmd";
BA_ "FieldType" SG_ 103 MOTOR_HEARTBEAT_cmd "MOTOR_HEARTBEAT_cmd";
BA_ "FieldType" SG_ 104 SENSOR_HEARTBEAT_cmd "SENSOR_HEARTBEAT_cmd";

BA_ "FieldType" SG_ 200 MOTOR_STEERING "MOTOR_STEERING";
BA_ "FieldType" SG_ 230 MOTOR_SPEED_val "MOTOR_SPEED_val";
BA_ "FieldType" SG_ 310 GEO_DESTINATION_REACHED_cmd "GEO_DESTINATION_REACHED_cmd";

VAL_ 100 DRIVER_HEARTBEAT_cmd 2 "DRIVER_HEARTBEAT_cmd_REBOOT" 1 "DRIVER_HEARTBEAT_cmd_SYNC" 0 "DRIVER_HEARTBEAT_cmd_NOOP" ;
VAL_ 101 GEO_HEARTBEAT_cmd 2 "GEO_HEARTBEAT_cmd_REBOOT" 1 "GEO_HEARTBEAT_cmd_SYNC" 0 "GEO_HEARTBEAT_cmd_NOOP";
VAL_ 102 MOTOR_HEARTBEAT_cmd 20 "MOTOR_HEARTBEAT_cmd_REBOOT" 10 "MOTOR_HEARTBEAT_cmd_SYNC" 0 "MOTOR_HEARTBEAT_cmd_NOOP" ;
VAL_ 103 SENSOR_HEARTBEAT_cmd 200 "SENSOR_HEARTBEAT_cmd_REBOOT" 100 "SENSOR_HEARTBEAT_cmd_SYNC" 0 "SENSOR_HEARTBEAT_cmd_NOOP" ;

VAL_ 200 MOTOR_STEERING_direction -2 "MOTOR_STEERING_hard_left" -1 "MOTOR_STEERING_slight_left" 0 "MOTOR_STEERING_straight" 1 "MOTOR_STEERING_slight_right" 2 "MOTOR_STEERING_hard_right";
VAL_ 220 MOTOR_SPEED_processed -3 "MOTOR_SPEED_reverse_fast" -2 "MOTOR_SPEED_reverse_medium" -1 "MOTOR_SPEED_reverse_slow" 0 "MOTOR_SPEED_neutral" 1 "MOTOR_SPEED_forward_slow" 2 "MOTOR_SPEED_forward_medium" 3 "MOTOR_SPEED_forward_fast";
VAL_ 310 GEO_DESTINATION_REACHED_cmd 1 "GEO_DESTINATION_REACHED_cmd_REACHED" 0 "GEO_DESTINATION_REACHED_cmd_NOT_REACHED";
</pre>

<BR/>

== '''Motor Controller''' ==
<Picture and link to Gitlab>

=== Hardware Design ===

=== Software Design ===
<List the code modules that are being called periodically.>

=== Technical Challenges ===

< List of problems and their detailed resolutions>

<HR>
<BR/>

== '''Geological Controller''' ==

<Picture and link to Gitlab>

=== Hardware Design ===

[[File:CMPE243_S20_T2_GEO1.png|thumb|center|650px| Geological Diagram]]

=== Software Design ===
<List the code modules that are being called periodically.>

=== Technical Challenges ===

< List of problems and their detailed resolutions>

<HR>
<BR/>

== '''Sensor  [Bridge and Sensor Controller]''' ==
<Picture and link to Gitlab>

==== Hardware Design ====

==== Software Design ====
<List the code modules that are being called periodically.>

==== Technical Challenges ====

< List of problems and their detailed resolutions>

<HR>
<BR/>

== '''Bridge  [Bridge and Sensor Controller]'''==
<Picture and link to Gitlab>

Bridge functionality of the Bridge and Sensor Controller is to establish wireless communication between the SJ-2 Board and the android mobile device using the HC-05 Bluetooth module. The Bridge controller will be receiving start command with destination GEO coordinates and stop command. The Bridge controller will be transmitting the required sensor data and debug information to be displayed on the android application.


=='''Ultrasonic Sensor'''==
====Hardware Design====
This sensor uses ultrasonic beam to measure the distances. Based on the time taken between when the beam is sent and received back to the sensor, the distance is calculated in the node.
Apart from 5v and GND, this sensor has 2 pins ECHO and TRIG which are interfaced to the SJ-Two board via GPIO.

[[File:CMPE243_S20_T2_CansterTruck_ultrasonic_sensor.jpg|thumb|center|300px| Ultrasonic Sensor Diagram]]

====Software Design====
* Init the GPIO pin connected to TRIG of the sensor as output and for ECHO as input port.
* Attach the interrupt on the ECHO input port.
* Store the system_clock_count before setting the trigger pulse and then set the pulse. Also keep monitoring the input port.
* Take the system_clock_count at the instant of receiving the interrupt.
Distance = (system_clock_count_at_trig - system_clock_count_after_at_echo) / 57.14

[[File:CMPE243_S20_T2_BRIDGE.png|thumb|center|500px| Bridge Diagram]]

==== Software Design ====
<List the code modules that are being called periodically.>

==== Technical Challenges ====

<List of problems and their detailed resolutions>

<HR>
<BR/>

== '''Driver  [Driver and LCD Controller]''' ==
<Picture and link to Gitlab>

=== Hardware Design ===

=== Software Design ===
<List the code modules that are being called periodically.>

=== Technical Challenges ===

< List of problems and their detailed resolutions>

<HR>
<BR/>

== '''LCD  [Driver and LCD Controller]''' ==
<Picture and link to Gitlab>

=== Hardware Design ===

=== Software Design ===
<List the code modules that are being called periodically.>

=== Technical Challenges ===

< List of problems and their detailed resolutions>

<HR>
<BR/>

== '''Android Application''' ==
[https://gitlab.com/akhilcherukuri/can-ster_truck_application Gitlab]
=== Software Design ===

[[File:CMPE243_S20_T2_BLUETOOTHFLOWCHART.png|thumb|center|650px| Android Application Flowchart]]

<List the code modules that are being called periodically.>

=== Technical Challenges ===

<HR>

'''Other hardware challenges:'''
* Figuring out why various hardware peripherals (GPS, Bluetooth, LIDAR and Ultrasonic sensor) started to malfunction (devices were on but values were either inconsistent / not occurring), took a lot of time to debug. It was due to insufficient power.

<BR/>

== '''Conclusion''' ==
CMPE243 gives one of the best experiences one could ever get in their academic life. The course is designed to give an insight into how the industry functions and enhances both technical and management skills. Apart from learning how to work and implement application of CAN protocol, one can get a hands-on experience with version control, unit-testing and software design. Overall it was a very great journey.

=== Project Video ===

=== Project Source Code ===

=== Advise for Future Students ===
'''GENERAL:'''
* Form your team and start the project as early as you can.
* Clearly discuss what role each individual should do and ensure that progress is regularly tracked so that the team doesn't fall back on any schedule.
* Since lot of code and hardware integration is involved with this project, make sure testing is thoroughly and periodically done and make note of all the issues found.
'''HARDWARE:'''
* Decide on how you would power up the peripherals. We had issues with Bluetooth (not connecting), GPS (lock not happening) and LIDAR (giving incorrect values). After lot of cycles of hardware and software debugging, we found that the issue was with power. Choose wisely as to which peripherals must be connected to which power bank.
* PCB design is time consuming as there is a lot of hardware components involved and a huge responsibility falls on the designer to know the about each component. Coordinating with multiple team members and verifying with them if their respective hardware is correct takes a lot of time. So start well ahead.
* Make sure to expose some extra GPIO and GND pins for future use.

=== Acknowledgement ===
<HR>
Firstly we would like to express our gratitude to Professor Preetpal Kang for his guidance throughout the semester and providing us with this opportunity. We would also like to thank the ISA members Vignesh Kumar Venkateshwar and Aakash Vrajlal Chitroda for being available whenever in need and guiding us to complete the project.

== '''References''' ==

===Motor Controller===

===Geological Controller===

===Bridge and Sensor Controller===

===Driver and LCD Controller===

===Android===
*Youtube Channel: [https://www.youtube.com/channel/UCoNZZLhPuuRteu02rh7bzsw Coding with Mitch]
*Android Developers: [https://developer.android.com/guide/topics/connectivity/bluetooth Website][https://github.com/googlearchive/android-BluetoothChat Github]
*Udemy Course: [https://www.udemy.com/course/the-complete-android-oreo-developer-course/ Complete Android Oreo Developer Course]

===PCB Design===
*EDC Tool: [https://easyeda.com/ EasyEDA]
